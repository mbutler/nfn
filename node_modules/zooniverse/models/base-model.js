// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModel, EventEmitter, _base, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_ref = window.zooniverse) == null) {
    window.zooniverse = {};
  }

  if ((_ref1 = (_base = window.zooniverse).models) == null) {
    _base.models = {};
  }

  EventEmitter = window.zooniverse.EventEmitter || require('../lib/event-emitter');

  BaseModel = (function(_super) {

    __extends(BaseModel, _super);

    BaseModel.idCounter = -1;

    BaseModel.instances = null;

    BaseModel.count = function() {
      var _ref2;
      if ((_ref2 = this.instances) == null) {
        this.instances = [];
      }
      return this.instances.length;
    };

    BaseModel.first = function() {
      var _ref2;
      if ((_ref2 = this.instances) == null) {
        this.instances = [];
      }
      return this.instances[0];
    };

    BaseModel.find = function(id) {
      var instance, _i, _len, _ref2, _ref3;
      if ((_ref2 = this.instances) == null) {
        this.instances = [];
      }
      _ref3 = this.instances;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        instance = _ref3[_i];
        if (instance.id === id) {
          return instance;
        }
      }
    };

    BaseModel.search = function(query) {
      var instance, miss, property, value, _i, _len, _ref2, _ref3, _results;
      if ((_ref2 = this.instances) == null) {
        this.instances = [];
      }
      _ref3 = this.instances;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        instance = _ref3[_i];
        miss = false;
        for (property in query) {
          if (!__hasProp.call(query, property)) continue;
          value = query[property];
          if (instance[property] !== value) {
            miss = true;
            break;
          }
        }
        if (miss) {
          continue;
        }
        _results.push(instance);
      }
      return _results;
    };

    BaseModel.destroyAll = function() {
      var _results;
      _results = [];
      while (this.count() !== 0) {
        _results.push(this.first().destroy());
      }
      return _results;
    };

    BaseModel.prototype.id = null;

    function BaseModel(params) {
      var property, value, _base1, _ref2;
      if (params == null) {
        params = {};
      }
      BaseModel.__super__.constructor.apply(this, arguments);
      for (property in params) {
        if (!__hasProp.call(params, property)) continue;
        value = params[property];
        if (property in this) {
          this[property] = value;
        }
      }
      this.constructor.idCounter += 1;
      if (this.id == null) {
        this.id = "C_" + this.constructor.idCounter;
      }
      if ((_ref2 = (_base1 = this.constructor).instances) == null) {
        _base1.instances = [];
      }
      this.constructor.instances.push(this);
    }

    BaseModel.prototype.destroy = function() {
      var i, instance, _i, _len, _ref2, _ref3, _results;
      BaseModel.__super__.destroy.apply(this, arguments);
      _ref2 = this.constructor.instances;
      _results = [];
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        instance = _ref2[i];
        if (!(instance === this)) {
          continue;
        }
        if ((_ref3 = this.constructor.instances) != null) {
          _ref3.splice(i, 1);
        }
        break;
      }
      return _results;
    };

    return BaseModel;

  })(EventEmitter);

  window.zooniverse.models.BaseModel = BaseModel;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = BaseModel;
  }

}).call(this);
